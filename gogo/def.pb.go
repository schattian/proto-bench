// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: def.proto

package official

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_TYPE_UNSPECIFIED Type = 0
	Type_TYPE_R           Type = 1
	Type_TYPE_S           Type = 2
)

var Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_R",
	2: "TYPE_S",
}

var Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"TYPE_R":           1,
	"TYPE_S":           2,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_76fb0470a3b910d8, []int{0}
}

type Message struct {
	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BirthDay int64   `protobuf:"varint,2,opt,name=birthDay,proto3" json:"birthDay,omitempty"`
	Phone    string  `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Siblings int32   `protobuf:"varint,4,opt,name=siblings,proto3" json:"siblings,omitempty"`
	Spouse   bool    `protobuf:"varint,5,opt,name=spouse,proto3" json:"spouse,omitempty"`
	Money    float64 `protobuf:"fixed64,6,opt,name=money,proto3" json:"money,omitempty"`
	Type     Type    `protobuf:"varint,7,opt,name=type,proto3,enum=protobench.Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Values:
	//	*Message_ValueS
	//	*Message_ValueI
	//	*Message_ValueD
	Values isMessage_Values `protobuf_oneof:"values"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_76fb0470a3b910d8, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Values interface {
	isMessage_Values()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_ValueS struct {
	ValueS string `protobuf:"bytes,8,opt,name=value_s,json=valueS,proto3,oneof"`
}
type Message_ValueI struct {
	ValueI int32 `protobuf:"varint,9,opt,name=value_i,json=valueI,proto3,oneof"`
}
type Message_ValueD struct {
	ValueD float64 `protobuf:"fixed64,10,opt,name=value_d,json=valueD,proto3,oneof"`
}

func (*Message_ValueS) isMessage_Values() {}
func (*Message_ValueI) isMessage_Values() {}
func (*Message_ValueD) isMessage_Values() {}

func (m *Message) GetValues() isMessage_Values {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Message) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Message) GetBirthDay() int64 {
	if m != nil {
		return m.BirthDay
	}
	return 0
}

func (m *Message) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Message) GetSiblings() int32 {
	if m != nil {
		return m.Siblings
	}
	return 0
}

func (m *Message) GetSpouse() bool {
	if m != nil {
		return m.Spouse
	}
	return false
}

func (m *Message) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *Message) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_TYPE_UNSPECIFIED
}

func (m *Message) GetValueS() string {
	if x, ok := m.GetValues().(*Message_ValueS); ok {
		return x.ValueS
	}
	return ""
}

func (m *Message) GetValueI() int32 {
	if x, ok := m.GetValues().(*Message_ValueI); ok {
		return x.ValueI
	}
	return 0
}

func (m *Message) GetValueD() float64 {
	if x, ok := m.GetValues().(*Message_ValueD); ok {
		return x.ValueD
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_ValueS)(nil),
		(*Message_ValueI)(nil),
		(*Message_ValueD)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// values
	switch x := m.Values.(type) {
	case *Message_ValueS:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ValueS)
	case *Message_ValueI:
		_ = b.EncodeVarint(9<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ValueI))
	case *Message_ValueD:
		_ = b.EncodeVarint(10<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.ValueD))
	case nil:
	default:
		return fmt.Errorf("Message.Values has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 8: // values.value_s
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Values = &Message_ValueS{x}
		return true, err
	case 9: // values.value_i
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Values = &Message_ValueI{int32(x)}
		return true, err
	case 10: // values.value_d
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Values = &Message_ValueD{math.Float64frombits(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// values
	switch x := m.Values.(type) {
	case *Message_ValueS:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ValueS)))
		n += len(x.ValueS)
	case *Message_ValueI:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.ValueI))
	case *Message_ValueD:
		n += 1 // tag and wire
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("protobench.Type", Type_name, Type_value)
	proto.RegisterType((*Message)(nil), "protobench.Message")
}

func init() { proto.RegisterFile("def.proto", fileDescriptor_76fb0470a3b910d8) }

var fileDescriptor_76fb0470a3b910d8 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0x41, 0x4f, 0xc2, 0x30,
	0x18, 0x86, 0x57, 0x18, 0x63, 0x7c, 0x07, 0xb3, 0x34, 0xc4, 0x54, 0x0f, 0xcb, 0x62, 0x3c, 0x34,
	0x1e, 0x46, 0xa2, 0xfe, 0x02, 0x04, 0x23, 0x07, 0x0d, 0x29, 0x78, 0xd0, 0x0b, 0xe9, 0x46, 0x61,
	0x4d, 0x60, 0x5d, 0xe8, 0x30, 0xd9, 0xbf, 0xf0, 0xec, 0x2f, 0xf2, 0xc8, 0xd1, 0xa3, 0x81, 0x3f,
	0x62, 0xd6, 0x99, 0xed, 0xd4, 0xf7, 0x7d, 0x9f, 0x7c, 0xfd, 0xde, 0x0f, 0x7a, 0x4b, 0xb1, 0x0a,
	0xb3, 0x9d, 0xca, 0x15, 0x06, 0xf3, 0x44, 0x22, 0x8d, 0x93, 0xab, 0xaf, 0x16, 0x74, 0x9f, 0x85,
	0xd6, 0x7c, 0x2d, 0x30, 0x06, 0x3b, 0xe5, 0x5b, 0x41, 0x50, 0x80, 0x68, 0x8f, 0x19, 0x8d, 0x2f,
	0xc1, 0x8d, 0xe4, 0x2e, 0x4f, 0x46, 0xbc, 0x20, 0xad, 0x00, 0xd1, 0x36, 0xab, 0x3d, 0xee, 0x43,
	0x27, 0x4b, 0x54, 0x2a, 0x48, 0xdb, 0x0c, 0x54, 0xa6, 0x9c, 0xd0, 0x32, 0xda, 0xc8, 0x74, 0xad,
	0x89, 0x1d, 0x20, 0xda, 0x61, 0xb5, 0xc7, 0xe7, 0xe0, 0xe8, 0x4c, 0xed, 0xb5, 0x20, 0x9d, 0x00,
	0x51, 0x97, 0xfd, 0xbb, 0xf2, 0xa7, 0xad, 0x4a, 0x45, 0x41, 0x9c, 0x00, 0x51, 0xc4, 0x2a, 0x83,
	0xaf, 0xc1, 0xce, 0x8b, 0x4c, 0x90, 0x6e, 0x80, 0xe8, 0xd9, 0xad, 0x17, 0x36, 0xb5, 0xc3, 0x79,
	0x91, 0x09, 0x66, 0x28, 0xbe, 0x80, 0xee, 0x07, 0xdf, 0xec, 0xc5, 0x42, 0x13, 0xb7, 0xec, 0xf1,
	0x64, 0x31, 0xc7, 0x04, 0xb3, 0x06, 0x49, 0xd2, 0x2b, 0x9b, 0xd4, 0x68, 0xd2, 0xa0, 0x25, 0x81,
	0x72, 0x67, 0x8d, 0x46, 0x43, 0x17, 0x2a, 0xa5, 0x6f, 0xee, 0xc1, 0x2e, 0x17, 0xe1, 0x3e, 0x78,
	0xf3, 0xb7, 0xe9, 0x78, 0xf1, 0xfa, 0x32, 0x9b, 0x8e, 0x1f, 0x26, 0x8f, 0x93, 0xf1, 0xc8, 0xb3,
	0x30, 0x80, 0x63, 0x52, 0xe6, 0xa1, 0x5a, 0xcf, 0xbc, 0xd6, 0x70, 0xf8, 0x7d, 0xf4, 0xd1, 0xe1,
	0xe8, 0xa3, 0xdf, 0xa3, 0x8f, 0x3e, 0x4f, 0xbe, 0x75, 0x38, 0xf9, 0xd6, 0xcf, 0xc9, 0xb7, 0xde,
	0xe9, 0x5a, 0xe6, 0xc9, 0x3e, 0x0a, 0x63, 0xb5, 0x1d, 0xe8, 0x38, 0xe1, 0x79, 0x2e, 0x79, 0x3a,
	0x68, 0xce, 0x1a, 0xa8, 0xd5, 0x4a, 0xc6, 0x92, 0x6f, 0x22, 0xc7, 0x84, 0x77, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xe0, 0xed, 0xa4, 0xf9, 0xb6, 0x01, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDef(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.BirthDay != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDef(dAtA, i, uint64(m.BirthDay))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDef(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Siblings != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDef(dAtA, i, uint64(m.Siblings))
	}
	if m.Spouse {
		dAtA[i] = 0x28
		i++
		if m.Spouse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Money != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Money))))
		i += 8
	}
	if m.Type != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDef(dAtA, i, uint64(m.Type))
	}
	if m.Values != nil {
		nn1, err1 := m.Values.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += nn1
	}
	return i, nil
}

func (m *Message_ValueS) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x42
	i++
	i = encodeVarintDef(dAtA, i, uint64(len(m.ValueS)))
	i += copy(dAtA[i:], m.ValueS)
	return i, nil
}
func (m *Message_ValueI) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x48
	i++
	i = encodeVarintDef(dAtA, i, uint64(m.ValueI))
	return i, nil
}
func (m *Message_ValueD) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x51
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ValueD))))
	i += 8
	return i, nil
}
func encodeVarintDef(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDef(uint64(l))
	}
	if m.BirthDay != 0 {
		n += 1 + sovDef(uint64(m.BirthDay))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovDef(uint64(l))
	}
	if m.Siblings != 0 {
		n += 1 + sovDef(uint64(m.Siblings))
	}
	if m.Spouse {
		n += 2
	}
	if m.Money != 0 {
		n += 9
	}
	if m.Type != 0 {
		n += 1 + sovDef(uint64(m.Type))
	}
	if m.Values != nil {
		n += m.Values.Size()
	}
	return n
}

func (m *Message_ValueS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValueS)
	n += 1 + l + sovDef(uint64(l))
	return n
}
func (m *Message_ValueI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovDef(uint64(m.ValueI))
	return n
}
func (m *Message_ValueD) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}

func sovDef(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDef(x uint64) (n int) {
	return sovDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDay", wireType)
			}
			m.BirthDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BirthDay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Siblings", wireType)
			}
			m.Siblings = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Siblings |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spouse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Spouse = bool(v != 0)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Money = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = &Message_ValueS{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueI", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Values = &Message_ValueI{v}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueD", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Values = &Message_ValueD{float64(math.Float64frombits(v))}
		default:
			iNdEx = preIndex
			skippy, err := skipDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDef
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDef
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDef
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDef(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDef
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDef = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDef   = fmt.Errorf("proto: integer overflow")
)
